
//------------------------------------------------------------------------------
//        This code was generated by `./build.sh test specs`
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------

import { expect, test } from 'vitest'
import { generateBindingFile } from '../../../..//src/Glutinum.Converter/Generate.fs.js'
import { dirname } from "dirname-filename-esm";
import path from 'node:path';

const __dirname = dirname(import.meta)

test('enums/literalStringEnumWithInheritanceAndParenthesized', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnumWithInheritanceAndParenthesized.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalStringEnumStartingWithDigit', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnumStartingWithDigit.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalStringEnumWithInheritanceWorksWithDupicates', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnumWithInheritanceWorksWithDupicates.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalStringEnumWithInheritance', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnumWithInheritance.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalNumericEnumWithInheritanceAndParenthesized', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalNumericEnumWithInheritanceAndParenthesized.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/namedIntEnum', () => {
    const filePath = path.join(__dirname, '../..//references/enums/namedIntEnum.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalStringEnum', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnum.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalNumericEnum', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalNumericEnum.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalNumericEnumWithInheritance', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalNumericEnumWithInheritance.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalNumericEnumWithInheritanceWorksWithDuplicates', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalNumericEnumWithInheritanceWorksWithDuplicates.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/namedIntEnumWithInitialRank', () => {
    const filePath = path.join(__dirname, '../..//references/enums/namedIntEnumWithInitialRank.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalNumericEnumWithNestedEnums', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalNumericEnumWithNestedEnums.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/namedStringEnum', () => {
    const filePath = path.join(__dirname, '../..//references/enums/namedStringEnum.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
test('enums/literalStringEnumWithDash', () => {
    const filePath = path.join(__dirname, '../..//references/enums/literalStringEnumWithDash.d.ts');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
})
        
    