module Build.Commands.Test.Specs

open BlackFox.CommandLine
open SimpleExec
open Build.Utils.Pnpm
open System.IO
open Spectre.Console.Cli
open System.ComponentModel

let private testFile (hiearchyLevel: int) (content: string) =
    let generateFilePath =
        [
            for _ in 1..hiearchyLevel do
                ".."
            "src"
            "Glutinum.Converter"
            "Generate.fs.js"
        ]
        |> String.concat "/"

    $"""
//------------------------------------------------------------------------------
//        This code was generated by `./build.sh test specs`
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------

import {{ expect, test }} from 'vitest'
import {{ generateBindingFile }} from '%s{generateFilePath}'
import {{ dirname }} from "dirname-filename-esm";
import path from 'node:path';

const __dirname = dirname(import.meta)

%s{content}
    """

let private generatedSpecsTestDestination = "tests/specs/generated/"

let private generateSpecsTestFile () =

    // Ensure we start from a clean state
    if Directory.Exists(generatedSpecsTestDestination) then
        Directory.Delete(generatedSpecsTestDestination, true)

    Directory.CreateDirectory(generatedSpecsTestDestination) |> ignore

    let specFiles =
        Directory.GetFiles(
            "tests/specs/references",
            "*.d.ts",
            SearchOption.AllDirectories
        )

    specFiles
    // Normalize the path
    |> Seq.map _.Replace('\\', '/')
    |> Seq.filter (fun file -> not (file.Contains("/disabled.")))
    |> Seq.map _.Replace("tests/specs/references/", "")
    // Group by folder
    |> Seq.groupBy (fun specFile ->
        if specFile.Split('/').Length <= 1 then
            failwithf "Spec files should be inside a folder: %s" specFile
        else
            // Normalize the dir path
            (Path.GetDirectoryName specFile).Replace('\\', '/')
    )
    |> Seq.iter (fun (folder, specFiles) ->
        let destinationFolder = generatedSpecsTestDestination + folder

        // Ensure destination folder exists
        if not (Directory.Exists(destinationFolder)) then
            Directory.CreateDirectory(destinationFolder) |> ignore

        let hiearchyLevel = folder.Split('/').Length + 1

        let tests =
            specFiles
            |> Seq.map (fun specFile ->
                let testName = specFile.Replace(".d.ts", "")

                let refereneFilePath =
                    [
                        for _ in 1..hiearchyLevel do
                            ".."
                        "references"
                        specFile
                    ]
                    |> String.concat "/"

                let expectedFilePath =
                    refereneFilePath.Replace(".d.ts", ".fsx")

                $"""test('%s{testName}', async () => {{
    // Click the link below to go to the respective file
    // Reference: file://./%s{refereneFilePath}
    // Expected: file://./%s{expectedFilePath}
    const filePath = path.join(__dirname, '%s{refereneFilePath}');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    await expect(result).toMatchFileSnapshot(expectedFile)
}})
        """
            )
            |> String.concat "\n"

        File.WriteAllText(
            destinationFolder + "/index.test.js",
            testFile (hiearchyLevel + 2) tests
        )
    )

type SpecSettings() =
    inherit CommandSettings()

    [<CommandOption("-w|--watch")>]
    [<Description("Watch for changes and re-run the tests

You can pass additional arguments to 'vitest' by using '--' followed by the arguments

For example:
    ./build.sh test specs --watch -- --ui
    ./build.sh test specs --watch -- -t date")>]
    member val IsWatch: bool = false with get, set

    [<CommandOption("--generate-only")>]
    [<Description("Only generate the tests files based on the `references` folder

This is the preferred way to generate the tests files of
you want to use the Test Explorer UI from your IDE.

You need to combine this options with `--watch` if you want
Fable to watch for changes and re-generate the files.

IMPORTANT: When adding or removing a file from the `references` folder,
you need to re-run this command. (Will be improved in the future)")>]
    member val GenerateOnly: bool = false with get, set

type SpecCommand() =
    inherit Command<SpecSettings>()
    interface ICommandLimiter<SpecSettings>

    override _.Execute(context, settings) =

        // We always need to generate the specs test files
        generateSpecsTestFile ()
        Pnpm.install ()

        if settings.GenerateOnly then
            let fableCmd =
                CmdLine.empty
                |> CmdLine.appendRaw "fable"
                |> CmdLine.appendIf settings.IsWatch "watch"
                |> CmdLine.appendRaw "src/Glutinum.Converter"
                |> CmdLine.appendRaw "--sourceMaps"
                |> CmdLine.appendRaw "--test:MSBuildCracker"
                |> CmdLine.toString

            Command.Run("dotnet", fableCmd)

            0
        else

            let additionalArgs =
                if settings.IsWatch then
                    let candidates =
                        context.Arguments
                        |> Seq.skipWhile (fun x -> x <> "--")
                        |> Seq.toList

                    if List.isEmpty candidates then
                        null
                    else
                        candidates |> List.skip 1 |> String.concat " "
                else
                    "run"

            let vitestCmd =
                CmdLine.empty
                |> CmdLine.appendRaw "npx"
                |> CmdLine.appendRaw "vitest"
                |> CmdLine.appendPrefix "--clearScreen" "false"
                |> CmdLine.appendRaw additionalArgs
                |> CmdLine.toString

            let fableCmd =
                CmdLine.empty
                |> CmdLine.appendRaw "fable"
                |> CmdLine.appendIf settings.IsWatch "watch"
                |> CmdLine.appendRaw "../../src/Glutinum.Converter"
                |> CmdLine.appendRaw "--sourceMaps"
                |> CmdLine.appendRaw "--test:MSBuildCracker"
                // Avoid strange logs because both Fable and Vitest rewrite the console
                |> CmdLine.appendRaw "--verbose"
                |> CmdLine.appendRaw "--run"
                |> CmdLine.appendRaw vitestCmd
                |> CmdLine.toString

            Command.Run("dotnet", fableCmd, workingDirectory = "tests/specs")

            0
