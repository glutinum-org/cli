module Build.Tasks.Test.Specs

open BlackFox.CommandLine
open SimpleExec
open Build.Utils.Pnpm
open System.IO

let private testFile (hiearchyLevel: int) (content: string) =
    let generateFilePath =
        [
            String.replicate hiearchyLevel "../"
            "src"
            "Glutinum.Converter"
            "Generate.fs.js"
        ]
        |> String.concat "/"

    $"""
//------------------------------------------------------------------------------
//        This code was generated by `./build.sh test specs`
//        Changes to this file will be lost when the code is regenerated.
//------------------------------------------------------------------------------

import {{ expect, test }} from 'vitest'
import {{ generateBindingFile }} from '%s{generateFilePath}'
// import {{ sum }} from './sum'
import {{ dirname }} from "dirname-filename-esm";
import path from 'node:path';

const __dirname = dirname(import.meta)

%s{content}
    """

let private generatedSpecsTestDestination = "tests/specs/generated/"

let private generateSpecsTestFile () =

    // Ensure we start from a clean state
    if Directory.Exists(generatedSpecsTestDestination) then
        Directory.Delete(generatedSpecsTestDestination, true)

    let specFiles =
        Directory.GetFiles(
            "tests/specs/references",
            "*.d.ts",
            SearchOption.AllDirectories
        )

    specFiles
    |> Seq.filter (fun file -> not (file.Contains("/disabled.")))
    // Normalize the path
    |> Seq.map _.Replace("tests/specs/references/", "").Replace("\\", "/")
    // Group by folder
    |> Seq.groupBy (fun specFile ->
        if specFile.Split('/').Length <= 1 then
            failwithf "Spec files should be inside a folder: %s" specFile
        else
            Path.GetDirectoryName specFile
    )
    |> Seq.iter (fun (folder, specFiles) ->
        let destinationFolder = generatedSpecsTestDestination + folder

        // Ensure destination folder exists
        if not (Directory.Exists(destinationFolder)) then
            Directory.CreateDirectory(destinationFolder) |> ignore

        let hiearchyLevel = folder.Split('/').Length + 1

        let tests =
            specFiles
            |> Seq.map (fun specFile ->
                // let specFileName =
                //     (Path.GetFileName specFile).Replace(".d.ts", ".fsx")

                let testName = specFile.Replace(".d.ts", "")

                let fileName =
                    [
                        String.replicate hiearchyLevel "../"
                        "references"
                        specFile
                    ]
                    |> String.concat "/"

                $"""test('%s{testName}', () => {{
    const filePath = path.join(__dirname, '%s{fileName}');
    let result = generateBindingFile(filePath);
    result += `
(***)
#r "nuget: Fable.Core"
(***)
`;

    const expectedFile = filePath.split('.').slice(0, -2).join('.') + '.fsx'

    expect(result).toMatchFileSnapshot(expectedFile)
}})
        """
            )
            |> String.concat "\n"

        File.WriteAllText(
            destinationFolder + "/index.test.js",
            testFile (hiearchyLevel + 2) tests
        )
    )

let handle (args: string list) =
    let isWatch = args |> List.contains "--watch"
    let generateOnly = args |> List.contains "--generate-only"

    // We always need to generate the specs test files
    generateSpecsTestFile ()
    Pnpm.install ()

    if generateOnly then
        let fableCmd =
            CmdLine.empty
            |> CmdLine.appendRaw "fable"
            |> CmdLine.appendIf isWatch "watch"
            |> CmdLine.appendRaw "src/Glutinum.Converter"
            |> CmdLine.appendRaw "--sourceMaps"
            |> CmdLine.toString

        Command.Run("dotnet", fableCmd)
    else

        let additionalArgs =
            if isWatch then
                let candidates = args |> List.skipWhile (fun x -> x <> "--")

                if List.isEmpty candidates then
                    null
                else
                    candidates |> List.skip 1 |> String.concat " "
            else
                "run"

        let vitestCmd =
            CmdLine.empty
            |> CmdLine.appendRaw "npx"
            |> CmdLine.appendRaw "vitest"
            |> CmdLine.appendRaw additionalArgs
            |> CmdLine.toString

        let fableCmd =
            CmdLine.empty
            |> CmdLine.appendRaw "fable"
            |> CmdLine.appendIf isWatch "watch"
            |> CmdLine.appendRaw "../../src/Glutinum.Converter"
            |> CmdLine.appendRaw "--sourceMaps"
            // Avoid strange logs because both Fable and Vitest rewrite the console
            |> CmdLine.appendRaw "--verbose"
            |> CmdLine.appendRaw "--run"
            |> CmdLine.appendRaw vitestCmd
            |> CmdLine.toString

        Command.Run("dotnet", fableCmd, workingDirectory = "tests/specs")
